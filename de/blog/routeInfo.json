{"template":"__react_static_root__/src/pages/de/blog.tsx","sharedHashesByProp":{},"data":{"posts":[{"basename":"(DE)-Das-Problem-definieren.md","title":"Das-Problem-definieren","lang":"DE","id":1099653886,"body":"## Das Problem definieren\n\n### Geschichten aus dem Gemeinschaftsgarten\n\n\nSeien wir mal ehrlich: Sogar alleine Gärtnern ist nicht unbedingt eine einfache Angelegenheit. Man braucht einiges an Wissen, Erfahrung und Ausdauer, damit das Ganze auch gelingt. Nun stellt euch eine ganze Horde an Menschen vor, die alle ihr bestes geben wollen, um eine grüne, fruchtbare und friedliche Insel mitten in der Stadtwüste zu errichten. Ganz genau - sowas wird dann schnell mal zum Großprojekt.\n\n\nNatürlich gibt es viel zu tun beim klassischen Gemeinschaftsgärtnern: Man kümmert sich um gemeinschaftlich genutzte Flächen, es muss gepflanzt, gejätet, bewässert und, wenn alles klappt wie geplant, geerntet werden. Davon abgesehen kommen Menschen in den Garten, um zu lernen und Wissen über das Gärtnern, Bauen oder Nachhaltigkeit zu teilen. Und nicht zuletzt ist der Garten ein Ort für's Entspannen und eine tolle Zeit, die man mit anderen verbringt.\n\n![Fragen von Gemeinschaftsgaertnerinnen](https://github.com/community-garden/community-garden.github.io/wiki/images/questions-gif.gif)\n\n\n\nDinge wollen organisiert werden, Aufgaben erledigt. Kommunikation findet statt - manchmal so viel davon, dass der Überblick verloren geht!. Außerdem hat jeder einzelne noch ein Leben außerhalb des Gartenparadieses, das manchmal auch ganz schön stressig sein kann. \n\nUnd so haben wir fünf Leute zu unserer Mission gefunden: Wir wollen für die Menschen im Garten ein durchdachtes Tool entwickeln, das es einfacher macht, sich in der Gruppe zu organisieren, Wissen auszutauschen, Termine zu managen usw. Vielleicht auch, sich mit anderen Initiativen in Verbindung zu setzen oder vielleicht auch ein völlig neues Gartenprojekt zu starten.\n\n## Frag doch mal die Gemeinschaftsgärtner\\*innen\n\nWie wir bereits verraten haben, identifizieren wir uns fast vollständig mit den Menschen, die später von unserem Prototypen profitieren sollen. Es liegt also auf der Hand, dass wir bereits mit einigen eigenen Ideen gestartet sind. Diese würden wenigstens eine Hand voll Gärtner*innen sehr glücklich machen, wie z. B. ein digitaler Gießplan, eine optimierte Termin- und Aufgabenverwaltung oder eine interaktive Karte. Es wäre auch schön Sensordaten, die uns über den Zustand des Gartens und der Gewächshäuser informieren, zu haben.\n\n\nJedenfalls hatten wir das Gefühl: das ist alles ein bisschen subjektiv. Wie repräsentativ sind wir wirklich? Haben andere Gärtner*innen dieselben Probleme wie wir? Welche Lösungen oder Produkte werden überhaupt bereits genutzt, um das Gärtnern in Gemeinschaft zu organisieren? \n\n### Also haben wir eine erste Umfrage im Gartennetzwerk von Dresden gestartet.\n\n\n![Umfrageergebnisse](https://github.com/community-garden/community-garden.github.io/wiki/images/Umfrage___englisch_2x.png)\n\n\n\nBeim Betrachten der Umfrageergebnisse wurde das Bild von zukünftigen Nutzern unseres Tools immer klarer. Wir waren in der Lage, aus den gesammelten Informationen und natürlich einigen Charakteristika von Menschen, die wir kennen, drei Personas zu bauen: Jonas, Franziska und Günther. Die drei sollten von nun an unsere härtesten Kritiker sein.\n\n\nMit den Nutzerinformationen und unseren drei Personas entstand nun ein Plan nach dem anderen - und tatsächlich schien auch die ein oder andere Ursprungsidee bestätigt. Nun standen wir vor dem nächsten Problem: Diese vielen Ideen können wir unmöglich alle mit den uns zur Verfügung stehenden Ressourcen in einen Prototypen verpacken. Der RICE-Score half uns dabei, eine Rangliste zu bilden und uns auf einige wenige der vielversprechendsten Ideen zu einigen. Sie bilden für uns von nun an eine klare Vision in der Kreation des Prototypen.\n\n\nDas ist Franziska, unsere initiative Familienmanagerin.\n\n![Persona Franziska](https://github.com/community-garden/community-garden.github.io/wiki/images/Franziska__die_initiative_Familienmanagerin_2x.png)\n\nDas ist Jonas, unser nachhaltigkeits-getriebener Student.\n\n![Persona Jonas](https://github.com/community-garden/community-garden.github.io/wiki/images/Jonas__der_nachhaltige_Student_2x.png)\n\nDas ist Günther, unser passionierter Garten-Senior.\n\n![Persona Günther](https://github.com/community-garden/community-garden.github.io/wiki/images/Guenther__der_engagierte_Rentner_2x.png)\n\n\n"},{"basename":"(DE)-Tech-Stack.md","title":"Tech-Stack","lang":"DE","id":-2009237593,"body":"## Frameworks & Technologien\n\n\nPlatform\n--\n\n- Desktop Browser (Fireforx + Chrome + Safari)\n- Desktop Electron (Cordov mit WebKit)\n- Desktop PWA (Firefox + Chrome)\n- mobil (iOS + Android) PWA (Firefox + Chrome)\n- mobil (iOS + Android)  almost nativ (Cordova mit WebKit)\n\nFull-Stack\n--\n\nAls Full-Stack bezeichnet man Frameworks, die einem ein fertigen Rahmen für die Client- und Serverentwicklung geben. Es ist nicht unbedingt notwendig ein FullStck Framework zu verwenden aber es kann mitunter die inertiale Entwicklung beschleunigen.\n\n- [Vulcan.js](http://vulcanjs.org/)\n- [Meteor](https://www.meteor.com)\n- [Fulcro](https://fulcro.fulcrologic.com)\n- [GRANDStack](https://grandstack.io/) - Neo4J, GraphQL, React, Apollo\n\n\nUI\n--\n\nGenerell bietet es sich an ein modernes UI-Framework zu verwenden. Man profitiert von vielen bereits vorhandnenen Komponenten und kann außerdem auf bewährte Design-patterns (nicht Design im Sinn von Ausssehen sondern im Sinne der Strukturierung von Code) zurückgreifen. Im Web und App-Entwicklungsuniversum haben sich das funktionale Komponentenbasierte React-Framework bewährt, alternativen dazu wären Angular.JS oder WebComponents. Es gibt auch die Möglichkeit Platform native Komponenten zu nutzen, das schließt dann aber die Entwicklung von gleichzeitig einer Web-Anwendung aus. Auch die Platform-Übergreifende Entwicklung ist dann nicht möglich. \n\n- React\n- React-Native\n- Reframe\n\n\n#### UI Komponenten Sammlung\n\nNeben der UI-Technologie gibt es noch die eigentlichen fertigen Komponenten\nauf die man um eines einheitlichen und komfortablen Designs wegen zurückgreifen\nkann. Wir ersparen uns dadurch nicht nur arbeit, es ist dann auch gewährleistet, dass die Grundbausteine auf allen Plattformen gut ausssehen. Persönlich bin ich von Framework 7 begeistert.\n\n- [Framework 7](https://framework7.io/)\n- semantic UI\n- Material.io\n- Bootstrap\n\n\nDatenhaltung\n--\n\nIm backend unserer Anwendung mössen Daten gespeichert werden. Es gibt viele verschiedene Möglichkeiten, wie das geschehen kann. Es kommt auch drauf an, um was es geht. Beisspielsweise könnten Garten-spezifische Konfigurationen in einer YAMl oder JSON Datei auf dem Server gespeichert werden, der Rest in einer Mongo-Datenbank. Die Pflanzinformationen wiederum könnten in einer RDF-Datenbank gespeichert werden. Auch SQL (Postgres, MariaDB) wäre denkbar. Wichtig wäre bei einem Prototyp die einfache Anpassbarkeit und Erweiterbarkeit und dass das Datenbankformat bereits in einem günstigen Format um besispielsweise für das Frontend (zb. per Graph-QL) ausgeliefert werden kann. Sollten wir uns für Meteor entscheiden ist Mongo-DB betreits festgelegt.\n\n- Mongo DB\n- RDF / Graphdatenbank\n- Filebasierend\n- [Neo4j + graphQL](https://grandstack.io/)\n\n\nStatemanagement\n--\n\nDas Statemanagement ist entscheidend für die Erweiterbarkeit und die langfristige Wartbarkeit einer Anwendung. Hier entstehen auch die meisten Fehler. Redux, verursacht zwar ein wenig mehr Aufwand, da man viel \"Boilerplate\" schreiben muss, erleichtert aber das Debugging und die Wartbarkeit ungemein, da man jede Zustandsänderung global zurückverfolgen kann. \n\n- redux\n- react\n- react-hooks\n- meteor\n- Apollo\n\n\nbackend-Frontend Kommunikation\n--\n\nAn verschiedenen Stellen des Programms kann es unterschiedliche Anforderungen geben. Wir müssen an dieser Stelle abwägen und uns gedanken machen an welchen Stellen wir eine sofortige Aktualisierung aller Clients wünschen (zum Beispiel bei der gemeinsamen Bearbeitung der Gartenkarte) und an welchen Stellen wir eher eine Offline Funktionalität wünschen. Es ist schwierig aber nicht unmöglich beides zu erreichen. Vielleicht nehmen wir deshalb auch unterschiedliche Ansätze.\n\n- GraphQL\n- Pub-Sub\n- meteor/mini-mongo\n- \n\n\nProgrammiersprache\n---\n\nEs bietet sich an die gleiche Sprache für Front und Backend zu verwenden. Muss aber nicht. Der Vorteil ist dass man Code in Backend und Frontend gleichermaßen verwenden kann, dass man eventuelle Specs und Type-definitionen nur einemal schreiben muss und, dass ein_e Entwickler_in, die sich in einer SPrache besonder wohl fühlt besser Front und Backend gleichermaßen entwickeln kann.\n\n- Clojure / ClojureScript\n- JavaScript\n- **TypeScript**\n- PHP\n\nBuild-Pipeline\n--\n \n - Backend\n     - backpack\n     - codegen (graphql -> typescript)\n \n - Frontend\n     - babel + ts\n     - webpack\n         - [codegen](https://github.com/dotansimha/graphql-code-generator#readme) (graphql -> typescript)\n         -\n     - pre-commit hook -> husky -> eslint --fix\n         - prettify\n     - cordova-cli\n         - android\n         - electron\n         - iOS\n    - \n\n\nCI/CD\n--\n\n- [Circle CI](https://circleci.com/)\n- [HQ] ?\n\n### Workflows\n\n- test\n- puppeteer\n- build-web\n- build-cordova\n    - android\n    - android+test\n\n\nspezial Bibliothek\n--\n\nFür verschiedene Teilaufgaben brauchen wir \"Spezial\"-Bibliotheken.\n\n\n- openlayers / leaflet -> Gartenkarte\n- OAuth\n\n- Apollo Client+Server (graphQL)\n    - neo4j-driver\n\nExperimente\n---\n\nhttps://codimd.gra.one/tBUxcSawQO-T-xILFxdYIg#\n\n"},{"basename":"(DE)-Wie-es-sich-anfühlt,-Meinungen-in-Zahlen-zu-verwandeln.md","title":"Wie-es-sich-anfühlt,-Meinungen-in-Zahlen-zu-verwandeln","lang":"DE","id":491565543,"body":"## Wie es sich anfühlt, Meinungen in Zahlen zu verwandeln\n\nWie schon im [letzten Kapitel](/blog/post/1458380018/) beschrieben, hatten wir ungefähr 20 geniale Ideen, die alle irgendwie die Bedürfnisse und Probleme unserer Nutzer aufgriffen. Priorisieirung dringend benötigt!\nBeim ersten Mal haben wir uns persönlich getroffen. Für das erste Meeting haben wir uns für zunächst die Hälfte der Ideen vorgenommen. So lief es ab:\n\n1. Wir haben ein gemeinsames Verständnis der Methode hergestellt, indem wir sie kurz vorgestellt und offene Fragen diskutiert haben.\n\n\n2. Wir haben uns auf einen strengen Zeitplan für die nächste Stunde geeinigt, der uns durch mindestens 10 Ideen führen sollte.\n\n\n3. Wir begannen mit der ersten Idee:\n\n* Eine Person stellt die Idee vor (1 Minute)\n* Das Team stellt Rückfragen, um das Verständnis der Idee zu vertiefen (2 Minuten)\n* Jedes Teammitglied bewertet die Idee für sich in den folgenden Dimensionen: Reichweite, Wirkung, Vertrauen, Aufwand (2 Minuten)\n* Die Bewertungen werden gesammelt und in einem sehr komplizierten Excel-Dokument zusammengeführt ;-) (1 Minute)\n\n4. Wir wiederholten Schritt 3 solange wir konnten.\n\n\nUnglaublich, aber wahr: es hat funktioniert. Wir haben die zweite Hälfte in einem BigBlueButton-Meeting bewertet, da wir uns aufgrund der COVID19-Beschränkungen nicht mehr vor Ort treffen konnten. Funktioniert hat das genauso gut – wir waren ja auch bereits gut mit der Methode vertraut.\n\nNun war die Excel-Tabelle bereit für den letzten Schliff und spuckte uns bereitwillig eine priorisierte Rangliste unserer Ideen aus. Das war ein großartiges Gefühl!\n\n## Die Gewinner\n\nHier sind sie also, unser vier vielversprechendsten Features, die wir mit der RICE-Methode identifizieren konnten.\n\n![Top Features](https://github.com/community-garden/community-garden.github.io/wiki/images/TopFeatures_EN___1_2x.png)\n\n### 1. Der Gießplan\n\nEin digitaler, interaktiver Gießplan regelt die faire und flexible Verteilung der Gießeinsätze viel besser als ein Excel-Sheet.\n\n### 2. Gartenzeit\n\nWorkshops und andere coole Gartentermine werden öffentlich sichtbar. Kalender-Import und Teilnehmer-Management sind denkbare Benefits.\n\n### 3. Was geht?\n\nAuf einem individuellen Dashboard sehen Gärtner*innen genau das, was sie brauchen. Kombiniert Inhalte aus anderen Features und Anwendungen.\n\n### 4. Erntereif\n\nWie ein Garten seine Ernte verteilt, wird hier geklärt. Ein Feature für eine bessere Verwertung des kostbaren Ertrags und eher zurückhaltende Erntehelfer*innen.\n"},{"basename":"(DE)-Über-Pergola.md","title":"Über-Pergola","lang":"DE","id":-426723368,"body":"## Über Pergola\n\nVon Beginn an war uns klar: wir brauchen möglichst schnell einen App-Namen, der sich einprägt. Auf Englisch sollte er auch funktionieren, und ein Bild vor Augen entstehen lassen. Natürlich etwas mit Pflanzen, Umwelt, Gemeinschaft...\n\nEines Tages kam die Erleuchtung in Form einer Grippe daher. Der arme Philipp lag flach, konnte nur ein wenig am Handy tippen und brauchte viel Schlaf. War´s im Traum oder doch bei klarem Verstand? Er machte sich im Delirium auf Namenssuche und konnte uns nach Genesung eine kleine Auswahl präsentieren. Unser aller Favorit war schnell geboren: die Pergola. Kennt ihr nicht? Die Pergola steht für einiges, was uns auch bei unserer Anwendung wichtig ist!\n\n\n> Die _Pergola_ ist ein Rankgerüst, Anlehnkonstruktion oder auch Spalier\n\nSo soll unsere App für die Gartengemeinschaft sein. Sie gibt Struktur vor, die von den Gärtnern befüllt werden kann. Rosen, Wicken, Efeu? Das entscheidet ihr!\n\n\n> Die _Pergola_ betont im Garten einen besonderen Fleck, sie führt zum Ziel\n\nSo ist der Geist unserer App. Eine digitale Handhabe für die Organisation eines Gemeinschaftsgartens zu haben, ist schon etwas Besonderes! Sie wird uns eine Hilfe sein!\n\n\n> Die _Pergola_ ist ein nach oben offenes Gebilde\n\nSo ist unsere App aufgebaut. Sie ist als open-source-Projekt entwickelt und setzt sich aus Modulen zusammen. Ihr entscheidet, welches Modul ihr nutzen wollt. Ihr inspiriert uns, welche Module in Zukunft hinzukommen. \n\n\n> Die _Pergola_ ist ein beschatteter Gang und gliedert die Fläche  \n\nSo wollen wir unsere App bereitstellen: Geschützt, sicher und relaxt. Nur so viel Beschallung, wie auch gut für die Gärtner*innen ist."}]},"path":"de/blog"}
